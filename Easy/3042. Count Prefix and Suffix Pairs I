class Node {
    Node[] links = new Node[26];
    boolean flag = false;

    public boolean containsKey(char ch) {
        return links[ch - 'a'] != null;
    }

    public void put(char ch, Node node) {
        links[ch - 'a'] = node;
    }

    public Node get(char ch) {
        return links[ch - 'a'];
    }

    public void setEnd() {
        flag = true;
    }

    public boolean isEnd() {
        return flag;
    }
}

class Trie {
    Node root;

    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        Node node = root;

        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if (!node.containsKey(ch)) {
                node.put(ch, new Node());
            }
            node = node.get(ch);
        }
        node.setEnd();
    }

    public boolean startsWith(String prefix) {
        Node node = root;

        for (int i = 0; i < prefix.length(); i++) {
            char ch = prefix.charAt(i);
            if (!node.containsKey(ch)) {
                return false;
            }
            node = node.get(ch);
        }
        return true;
    }
}

class Solution {
    public int countPrefixSuffixPairs(String[] words) {
        int count = 0;

        for (int i = 0; i < words.length; i++) {
            Trie prefix = new Trie();
            Trie suffix = new Trie();

            prefix.insert(words[i]);

            StringBuilder sb = new StringBuilder(words[i]);
            String rev = sb.reverse().toString();

            suffix.insert(rev);

            for (int j = 0; j < i; j++) {
                if (words[j].length() > words[i].length()) {
                    continue;
                }

                String prefixWord = words[j];
                StringBuilder temp = new StringBuilder(prefixWord);
                String revWord = temp.reverse().toString();

                if (prefix.startsWith(prefixWord) && suffix.startsWith(revWord)) {
                    count++;
                }
            }
        }
        return count;
    }
}
