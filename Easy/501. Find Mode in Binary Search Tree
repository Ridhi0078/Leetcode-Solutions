/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // firstly build a hashmap of every root's val and it's frequency
    public static void findDuplicate(TreeNode root, HashMap<Integer, Integer> map) {
        if (root == null) {
            return;
        }
        map.put(root.val, map.getOrDefault(root.val, 0) + 1);
        findDuplicate(root.left, map);
        findDuplicate(root.right, map);
    }

    public int[] findMode(TreeNode root) {
        HashMap<Integer, Integer> map = new HashMap<>();
        List<Integer> list = new ArrayList<>();
        findDuplicate(root, map);
        int maxFreq = Integer.MIN_VALUE;

        for (int freq : map.values()) {
            maxFreq = Math.max(maxFreq, freq);
        }

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int key = entry.getKey();
            int value = entry.getValue();

            if (value == maxFreq) {
                list.add(key);
            }
        }

        int arr[] = new int[list.size()];
        int idx = 0;
        for (int num : list) {
            arr[idx++] = num;
        }
        return arr;
    }
}
