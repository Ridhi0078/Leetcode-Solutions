/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) {
            return "";
        }
        Queue<TreeNode> q = new LinkedList<>();
        StringBuilder sb = new StringBuilder();

        q.offer(root);

        while (!q.isEmpty()) {
            TreeNode n = q.poll();

            if (n == null) {
                sb.append("#,");
                continue;
            }

            sb.append(n.val).append(",");
            q.add(n.left);
            q.add(n.right);
        }

        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data == "") {
            return null;
        }

        String[] values = data.split(",");
        Queue<TreeNode> q = new LinkedList<>();

        TreeNode root = new TreeNode(Integer.parseInt(values[0]));
        q.offer(root);
        int i = 1;

        while (!q.isEmpty() && i < values.length) {
            TreeNode n = q.poll();

            if (!values[i].equals("#")) {
                n.left = new TreeNode(Integer.parseInt(values[i]));
                q.offer(n.left);
            }

            i++;

            if (i < values.length && !values[i].equals("#")) {
                n.right = new TreeNode(Integer.parseInt(values[i]));
                q.offer(n.right);
            }
            i++;
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
