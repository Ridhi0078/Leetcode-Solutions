class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        // Firstly, declare a deque.
        // Now, add the element at the j index to the deque
        // while adding also check if the the curr element that we are traversing inside the window is greater then the last element of the queue, if it is so then remove the element until a greater element is found inside that particular window.
        // if the window size is equal to k then add the add the first element of thee queue at the ith indedx of the array ans and also check if the element at the ith index of nums is equal to the first element of the queue then remove it as when we slide the window to i+1 then all the records of the previous element needs to be removed.
        int n = nums.length;
        int ans[] = new int[n - k + 1];

        Deque<Integer> q = new LinkedList<>();
        int i = 0;
        int j = 0;

        while (j < n) {
            if (q.size() == 0) {
                q.add(nums[j]);
            } else {
                while (q.size() > 0 && q.peekLast() < nums[j]) {
                    q.removeLast();
                }
                q.add(nums[j]);
            }

            if (j - i + 1 < k) {
                j++;
            }

            else if (j - i + 1 == k) {
                ans[i] = q.peek();

                if (nums[i] == q.peek()) {
                    q.removeFirst();
                }

                i++;
                j++;
            }
        }
        return ans;
    }
}
