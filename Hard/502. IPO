class Project {
    int profit;
    int capital;

    public Project(int profit, int capital) {
        this.profit = profit;
        this.capital = capital;
    }
}

class Solution {
    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {
        int n = profits.length;
        List<Project> list = new ArrayList<>();

        // build a list of project type containing profits and capital
        for (int i = 0; i < n; i++) {
            list.add(new Project(profits[i], capital[i]));
        }

        // sort the list on the basis of capital
        Collections.sort(list, (a, b) -> a.capital - b.capital);

        // Build a maxheap to store the profit and taking the max profit out of it
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());

        // taking an inital index of 0 
        int idx = 0;
        // looping upto k elements
        for (int j = 0; j < k; j++) {
            while (idx < n && list.get(idx).capital <= w) {
                pq.add(list.get(idx).profit);
                idx++;
            }

            if (pq.isEmpty()) {
                break;
            }
            w += pq.poll(); // with each loop add max value to the w 
        }
        return w;
    }
}
