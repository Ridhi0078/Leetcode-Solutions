class Solution {
    public int[] gardenNoAdj(int n, int[][] paths) {
        List<List<Integer>> adj = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }

        for (int path[] : paths) {
            adj.get(path[0] - 1).add(path[1] - 1);
            adj.get(path[1] - 1).add(path[0] - 1);
        }

        int color[] = new int[n];

        for (int i = 0; i < n; i++) {
            if (color[i] == 0) {
                color[i] = 1;

                Queue<Integer> q = new LinkedList<>();
                q.offer(i);

                while (!q.isEmpty()) {
                    int curr = q.poll();

                    for (int nbr : adj.get(curr)) {
                        if (color[nbr] == 0 || color[nbr] == color[curr]) {
                            color[nbr] = color[curr] + 1;

                            if (color[nbr] > 4) {
                                color[nbr] %= 4;

                                if (color[nbr] == 0) {
                                    color[nbr] = 4;
                                }
                            }
                            q.offer(nbr);
                        }
                    }
                }
            }
        }
        return color;
    }
}
