/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public String solve(TreeNode root, List<TreeNode> list, HashMap<String, Integer> map) {
        if (root == null) {
            return "#";
        }

        String str = root.val + "," + solve(root.left, list, map) + "," + solve(root.right, list, map);

        map.put(str, map.getOrDefault(str, 0) + 1);

        if (map.get(str) == 2) {
            list.add(root);
        }

        return str;
    }

    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> list = new ArrayList<>();
        HashMap<String, Integer> map = new HashMap<>();
        solve(root, list, map);
        return list;
    }
}
