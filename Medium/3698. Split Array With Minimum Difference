class Solution {
    public long splitArray(int[] nums) {
        int n = nums.length;
        long prefix[] = new long[n];
        long suffix[] = new long[n];

        prefix[0] = nums[0];

        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }

        suffix[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = suffix[i + 1] + nums[i];
        }

        boolean leftValid[] = new boolean[n];
        leftValid[0] = true;

        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1] && leftValid[i - 1]) {
                leftValid[i] = true;
            } else {
                leftValid[i] = false;
            }
        }

        boolean rightValid[] = new boolean[n];
        rightValid[n - 1] = true;

        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] > nums[i + 1] && rightValid[i + 1]) {
                rightValid[i] = true;
            } else {
                rightValid[i] = false;
            }
        }

        long mindiff = Long.MAX_VALUE;
        boolean flag = false;

        for (int i = 0; i < n - 1; i++) {
            if (leftValid[i] && rightValid[i + 1]) {
                flag = true;
                long left = prefix[i];
                long right = suffix[i + 1];

                mindiff = Math.min(mindiff, Math.abs(left - right));
            }
        }

        if (flag) {
            return mindiff;
        }
        return -1;
    }
}
