class Solution {
    public String smallestSubsequence(String s) {
        HashMap<Character,Integer> map=new HashMap<>();

        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);
            map.put(ch,map.getOrDefault(ch,0)+1);
        }

        boolean visited[]=new boolean[26];
        Stack<Character> st=new Stack<>();

        for(char c:s.toCharArray()){
            map.put(c,map.get(c)-1);

            // if already visited then skip the loop
            if(visited[c-'a']){
                continue;
            }

            // if stack is not empty and the peek is greater than character then pop it and mark it as unvisited
            while(!st.isEmpty() && st.peek()>c && map.get(st.peek())>0){
                visited[st.pop()-'a']=false;
            }

            st.push(c);
            visited[c-'a']=true;
        }
        StringBuilder sb=new StringBuilder();

        while(!st.isEmpty()){
            sb.append(st.pop());
        }
        return sb.reverse().toString();
    }
}
